import moment from 'moment';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { Controller, useForm } from 'react-hook-form';
import NumberFormat from 'react-number-format';
import { useSelector } from 'react-redux';
import { IBrand } from '../../../models/brand';
import { ICategory } from '../../../models/category';
import { IParamsProduct } from '../../../models/product';
import { IShipping } from '../../../models/shipping';
import { SelectOption } from '../../../models/utils/input';
import { IVendor } from '../../../models/vendor';
import { AppState } from '../../../redux/reducer';
import Checkbox from '../../common/components/input/Checkbox';
import CheckboxSlider from '../../common/components/input/CheckboxSlider';
import InputComponent from '../../common/components/input/InputComponent';
import InputFormLayout from '../../common/components/input/InputFormLayout';
import InputGroup from '../../common/components/input/InputGroup';
import InputImage from '../../common/components/input/InputImage';
import MultiSelectionCheckboxComponent from '../../common/components/input/MultiSelectionCheckboxComponent';
import MultiSelectionComponent from '../../common/components/input/MultiSelectionComponent';
import PickDateComponent from '../../common/components/input/PickDateComponent';
import SelectionComponent from '../../common/components/input/SelectionComponent';
import SuggestiveInputDynamic from '../../common/components/input/SuggestiveInputDymamic';
import SuggestiveInputStatic from '../../common/components/input/SuggestiveInputStatic';
import TextareaComponent from '../../common/components/input/TextareaComponent';
import TextEditorComponent from '../../common/components/input/TextEditorComponent';
import SelectShippingComponent from './form/SelectShippingComponent';

interface Props {
  submitFlag: boolean;
  setSubmitFlag?(changeTo: boolean): void;
  detailForm?: boolean;
  productInfo: IParamsProduct;
  onSubmit(product: IParamsProduct): void;
  onSubmitable(changeTo: boolean): void;
}

const FormProductComponent = (props: Props) => {
  const { detailForm, submitFlag, onSubmit, productInfo, onSubmitable, setSubmitFlag } = props;
  const {
    control,
    watch,
    formState: { errors, dirtyFields },
    handleSubmit,
  } = useForm<IParamsProduct>({
    mode: 'onTouched',
    reValidateMode: 'onChange',
    shouldUnregister: true,
    defaultValues: productInfo,
  });
  const vendorList = useSelector<AppState, IVendor[]>((state) => state.vendor.list);
  const brandList = useSelector<AppState, IBrand[]>((state) => state.brand.list);
  const categoryList = useSelector<AppState, ICategory[]>((state) => state.category.list);
  const shippingList = useSelector<AppState, IShipping[]>((state) => state.shipping.list);

  const [vendorOptions, setVendorOptions] = useState<SelectOption[]>([]);
  const [brandOptions, setBrandOptions] = useState<SelectOption[]>([]);
  const [categoryOptions, setCategoryOptions] = useState<SelectOption[]>([]);
  const [isSale, setIsSale] = useState(false);

  const membershipOptions: SelectOption[] = useMemo(() => [{ label: 'General', value: '4' }], []);
  const saleTypeOptions: SelectOption[] = useMemo(
    () => [
      { label: '$', value: '$' },
      { label: '%', value: '%' },
    ],
    [],
  );
  const ogTagsTypeOptions: SelectOption[] = useMemo(
    () => [
      { label: 'Autogenerated', value: '0' },
      { label: 'Custom', value: '1' },
    ],
    [],
  );

  const metaDescTypeOptions: SelectOption[] = useMemo(
    () => [
      { label: 'Autogenerated', value: 'A' },
      { label: 'Custom', value: 'C' },
    ],
    [],
  );
  const conditionOptions: SelectOption[] = useMemo(() => [{ label: 'Used', value: '292' }], []);

  const watchOGTagsType = watch('og_tags_type');
  const watchMetaDescType = watch('meta_desc_type');
  const watchCondition = watch('condition_id');

  useEffect(() => {
    // check error
    if (
      errors.vendor_id ||
      errors.name ||
      errors.brand_id ||
      errors.condition_id ||
      errors.imagesInfo ||
      errors.categories ||
      errors.description ||
      errors.price ||
      errors.quantity ||
      errors.shipping_to_zones
    ) {
      console.log('error');
      onSubmitable(false);
      return;
    }
    if (detailForm) {
      if (Object.keys(dirtyFields).length > 0) {
        onSubmitable(true);
      } else {
        onSubmitable(false);
      }
      return;
    }
    // for create
    if (
      !dirtyFields.vendor_id ||
      !dirtyFields.name ||
      !dirtyFields.brand_id ||
      !dirtyFields.condition_id ||
      !dirtyFields.imagesInfo ||
      !dirtyFields.categories ||
      !dirtyFields.description ||
      !dirtyFields.price ||
      !dirtyFields.quantity ||
      !dirtyFields.shipping_to_zones
    ) {
      onSubmitable(false);
      return;
    }
    onSubmitable(true);
  }, [
    errors,
    detailForm,
    dirtyFields,
    errors.vendor_id,
    errors.name,
    errors.brand_id,
    errors.condition_id,
    errors.imagesInfo,
    errors.categories,
    errors.description,
    errors.price,
    errors.quantity,
    errors.shipping,
    errors.shipping_to_zones,
    dirtyFields.vendor_id,
    dirtyFields.name,
    dirtyFields.brand_id,
    dirtyFields.condition_id,
    dirtyFields.imagesInfo,
    dirtyFields.categories,
    dirtyFields.description,
    dirtyFields.price,
    dirtyFields.quantity,
    dirtyFields.shipping,
    dirtyFields.shipping_to_zones,
    onSubmitable,
  ]);

  const handleSearchVendor = useCallback(
    (pattern: string) => {
      const options = vendorList
        .filter((vendor) => vendor.name.includes(pattern))
        .map((vendor) => ({ label: vendor.name, value: vendor.id as string }));
      setVendorOptions(options);
    },
    [vendorList],
  );

  useEffect(() => {
    setBrandOptions(brandList.map((brand) => ({ label: brand.name, value: brand.id })));
  }, [brandList]);

  useEffect(() => {
    setCategoryOptions(categoryList.map((category) => ({ label: category.name, value: category.id })));
  }, [categoryList]);

  useEffect(() => {
    setIsSale(parseFloat(productInfo.sale_price as string) > 0 ? true : false);
  }, [productInfo]);

  const handleChangeProductInfo = useCallback(
    (productInfo: IParamsProduct) => {
      onSubmit(productInfo);
    },
    [onSubmit],
  );

  useEffect(() => {
    if (submitFlag) {
      handleSubmit(handleChangeProductInfo, () => {
        onSubmitable(false);
        setSubmitFlag && setSubmitFlag(false);
      })();
    }
  }, [submitFlag, handleSubmit, handleChangeProductInfo, onSubmitable, setSubmitFlag]);

  const defaultVendorName = useMemo(() => {
    return detailForm ? vendorList.find((vendor) => vendor.id == productInfo.vendor_id)?.name || '' : '';
  }, [detailForm, vendorList, productInfo.vendor_id]);

  return (
    <form onSubmit={handleSubmit(handleChangeProductInfo)}>
      <div className="mx-10">
        <div className="space-y-6 pt-4 pb-10">
          <InputFormLayout title="Vendor" required smTitle error={errors.vendor_id?.message}>
            <Controller
              name={'vendor_id'}
              control={control}
              rules={{ validate: (value) => !!value || 'Please select Vendor' }}
              render={({ field }) => (
                <SuggestiveInputDynamic
                  placeholder="Type Vendor name to select"
                  list={vendorOptions}
                  onBlur={field.onBlur}
                  onChangeText={handleSearchVendor}
                  onSelect={field.onChange}
                  defaultText={defaultVendorName}
                />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Product Title" required smTitle error={errors.name?.message}>
            <Controller
              name={'name'}
              control={control}
              rules={{ required: 'Product title is required' }}
              render={({ field }) => (
                <InputComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Brands" required smTitle error={errors.brand_id?.message}>
            <Controller
              name={'brand_id'}
              control={control}
              rules={{ validate: (value) => !!value || 'Please select Brand' }}
              render={({ field }) => (
                <SuggestiveInputStatic
                  selectable
                  list={brandOptions}
                  selectedValue={field.value}
                  onBlur={field.onBlur}
                  onSelect={field.onChange}
                  placeholder="Type Brand name to select"
                />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Condition" required smTitle error={errors.condition_id?.message}>
            <Controller
              name={'condition_id'}
              control={control}
              rules={{ validate: (value) => !!value || 'Please select Condition' }}
              render={({ field }) => (
                <SelectionComponent
                  title=""
                  list={conditionOptions}
                  onBlur={field.onBlur}
                  selectedValue={field.value}
                  onChange={field.onChange}
                />
              )}
            />
          </InputFormLayout>
          {watchCondition == '292' && (
            <InputFormLayout title="Used condition" smTitle>
              <SelectionComponent title="" list={[]} selectedValue="" onChange={() => {}} />
            </InputFormLayout>
          )}
          <InputFormLayout title="SKU" smTitle>
            <Controller
              name={'sku'}
              control={control}
              render={({ field }) => (
                <InputComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Images" required smTitle lg error={(errors.imagesInfo as any)?.message}>
            <Controller
              name={'imagesInfo'}
              control={control}
              rules={{
                validate: (images) => {
                  return (images && images.length > 0) || 'Please select image';
                },
              }}
              render={({ field }) => (
                <InputImage images={field.value!} onChange={field.onChange} onBlur={field.onBlur} />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Category" required smTitle lg error={(errors.categories as any)?.message}>
            <Controller
              name={'categories'}
              control={control}
              rules={{ validate: (categories) => categories.length > 0 || 'Please select category' }}
              render={({ field }) => (
                <MultiSelectionComponent
                  onBlur={field.onBlur}
                  list={categoryOptions}
                  selectedValues={field.value as string[]}
                  title=""
                  onChange={field.onChange}
                />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Description" required smTitle lg error={errors.description?.message}>
            <Controller
              name={'description'}
              control={control}
              rules={{ required: 'Description is required' }}
              render={({ field }) => <TextEditorComponent text={field.value} onChange={field.onChange} />}
            />
          </InputFormLayout>
          <InputFormLayout title="Available for sale" smTitle>
            <Controller
              name={'participate_sale'}
              control={control}
              render={({ field }) => (
                <CheckboxSlider
                  value={field.value == '1'}
                  onChange={(changeTo) => field.onChange(changeTo ? '1' : '0')}
                />
              )}
            />
          </InputFormLayout>
        </div>
      </div>
      <div className="h-5 bg-primary"></div>
      <div className="mx-10 my-6">
        <div className="text-2xl">Price & inventory</div>
        <div className="space-y-6 py-6">
          <InputFormLayout title="Memberships" smTitle>
            <Controller
              name={'memberships'}
              control={control}
              render={({ field }) => (
                <MultiSelectionCheckboxComponent
                  title="Ignore Membership"
                  list={membershipOptions}
                  selectedValues={field.value}
                  onChange={field.onChange}
                />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Tax class" smTitle>
            <Controller
              name={'tax_exempt'}
              control={control}
              render={({ field }) => (
                <div className="flex">
                  <div className="grow">Default</div>
                  <div className="flex grow items-center gap-3">
                    <Checkbox
                      white
                      value={field.value == '1'}
                      onChange={(changeTo) => field.onChange(changeTo ? '1' : '0')}
                    />
                    Tax exempt
                  </div>
                </div>
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Price" required smTitle lg error={errors.price?.message}>
            <Controller
              name={'price'}
              control={control}
              rules={{ validate: (value) => value > 0 || 'Price must be greater than 0' }}
              render={({ field }) => (
                <div className="flex gap-x-6">
                  <div className="w-32 shrink-0">
                    <InputGroup sign={<i className="fa-solid fa-dollar-sign"></i>}>
                      <NumberFormat
                        customInput={InputComponent}
                        decimalScale={2}
                        fixedDecimalScale
                        value={field.value}
                        onBlur={field.onBlur}
                        onChange={field.onChange}
                      />
                    </InputGroup>
                  </div>
                  <div className="flex items-center gap-x-2">
                    <Checkbox white value={isSale} onChange={setIsSale} /> Sale
                  </div>
                  {isSale && (
                    <div className="flex">
                      <div className="w-20 rounded border border-[#a16eff]">
                        <Controller
                          name={'sale_price_type'}
                          control={control}
                          render={({ field }) => (
                            <SelectionComponent
                              title=""
                              list={saleTypeOptions}
                              selectedValue={field.value}
                              onChange={field.onChange}
                            />
                          )}
                        />
                      </div>
                      <div className="w-32 rounded border border-[#a16eff]">
                        <Controller
                          name={'sale_price'}
                          control={control}
                          render={({ field }) => (
                            <NumberFormat
                              customInput={InputComponent}
                              decimalScale={2}
                              value={field.value}
                              onBlur={field.onBlur}
                              onChange={field.onChange}
                            />
                          )}
                        />
                      </div>
                    </div>
                  )}
                </div>
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Arrival date" smTitle>
            <Controller
              name={'arrival_date'}
              control={control}
              render={({ field }) => (
                <InputGroup sign={<i className="fa-solid fa-calendar"></i>}>
                  <PickDateComponent selectedValue={field.value as Date} onChange={field.onChange} showYearDropdown />
                </InputGroup>
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Quality in stock" required smTitle error={errors.quantity?.message}>
            <Controller
              name={'quantity'}
              control={control}
              rules={{ validate: (value) => value > 0 || 'Quantity must be greater than 0' }}
              render={({ field }) => (
                <NumberFormat
                  customInput={InputComponent}
                  value={field.value}
                  onBlur={field.onBlur}
                  onChange={field.onChange}
                  decimalScale={0}
                  fixedDecimalScale
                />
              )}
            />
          </InputFormLayout>
        </div>
      </div>
      <div className="h-5 bg-primary"></div>
      <div className="mx-10 my-6">
        <div className="text-2xl">Shipping</div>
        <div className="space-y-6 py-6">
          <Controller
            name={'shipping_to_zones'}
            control={control}
            rules={{
              validate: (values) => (values && parseFloat(values[0].price) > 0) || 'Values must be greater than 0',
            }}
            render={({ field }) => (
              <SelectShippingComponent
                list={shippingList}
                selectedValues={field.value!}
                onChange={field.onChange}
                onBlur={field.onBlur}
              />
            )}
          />
          {errors.shipping_to_zones && (
            <div className="t-2 ml-2 w-full text-red-500">{(errors.shipping_to_zones as any).message}</div>
          )}
        </div>
      </div>
      <div className="bg-pry h-5"></div>
      <div className="mx-10 my-6">
        <div className="text-2xl">Marketing</div>
        <div className="space-y-6 py-6">
          <InputFormLayout title="Open Graph meta tags" smTitle>
            <Controller
              name={'og_tags_type'}
              control={control}
              render={({ field }) => (
                <SelectionComponent
                  title=""
                  list={ogTagsTypeOptions}
                  onBlur={field.onBlur}
                  selectedValue={field.value}
                  onChange={field.onChange}
                />
              )}
            />
          </InputFormLayout>
          {watchOGTagsType == '1' && (
            <InputFormLayout title="" smTitle>
              <Controller
                name={'og_tags'}
                control={control}
                render={({ field }) => (
                  <TextareaComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
                )}
              />
            </InputFormLayout>
          )}
          <InputFormLayout title="Meta description" smTitle>
            <Controller
              name={'meta_desc_type'}
              control={control}
              render={({ field }) => (
                <SelectionComponent
                  title=""
                  list={metaDescTypeOptions}
                  onBlur={field.onBlur}
                  selectedValue={field.value}
                  onChange={field.onChange}
                />
              )}
            />
          </InputFormLayout>
          {watchMetaDescType == 'C' && (
            <InputFormLayout title="" smTitle>
              <Controller
                name={'meta_description'}
                control={control}
                render={({ field }) => (
                  <TextareaComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
                )}
              />
            </InputFormLayout>
          )}
          <InputFormLayout title="Meta keywords" smTitle>
            <Controller
              name={'meta_keywords'}
              control={control}
              render={({ field }) => (
                <InputComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Product page title" smTitle helper="Leave blank to use product name as Page Title.">
            <Controller
              name={'product_page_title'}
              control={control}
              render={({ field }) => (
                <InputComponent onBlur={field.onBlur} value={field.value} onChange={field.onChange} />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Add to Facebook product feed" smTitle>
            <Controller
              name={'facebook_marketing_enabled'}
              control={control}
              render={({ field }) => (
                <CheckboxSlider
                  value={field.value == '1'}
                  onChange={(changeTo) => field.onChange(changeTo ? '1' : '0')}
                />
              )}
            />
          </InputFormLayout>
          <InputFormLayout title="Add to Google product feed" smTitle>
            <Controller
              name={'google_feed_enabled'}
              control={control}
              render={({ field }) => (
                <CheckboxSlider
                  value={field.value == '1'}
                  onChange={(changeTo) => field.onChange(changeTo ? '1' : '0')}
                />
              )}
            />
          </InputFormLayout>
        </div>
      </div>
      <input type="submit" hidden />
    </form>
  );
};

export default FormProductComponent;
